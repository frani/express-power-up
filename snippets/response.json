{
  "Response Append": {
    "prefix": "ep-res-append",
    "body": "res.append('${1:field}', ${2:value})$0",
    "description": "Appends the specified value to the HTTP response header field."
  },
  "Response Attachment": {
    "prefix": "ep-res-attachment",
    "body": "res.attachment('${1:filename}')$0",
    "description": "Sets the HTTP response Content-Disposition header field to attachment."
  },
  "Response Cookie": {
    "prefix": "ep-res-cookie",
    "body": "res.cookie('${1:name}', ${2:value})$0",
    "description": "Sets cookie name to value. The value parameter may be a string or object converted to JSON."
  },
  "Response Cookie With Options": {
    "prefix": "ep-res-cookie-with-options",
    "body": "res.cookie('${1:name}', ${2:value}, ${3:options})$0",
    "description": "Sets cookie name to value. The value parameter may be a string or object converted to JSON."
  },
  "Response Clear Cookie": {
    "prefix": "ep-res-clear-cookie",
    "body": "res.clearCookie('${1:name}')$0",
    "description": "Clears the cookie specified by name."
  },
  "Response Clear Cookie With Options": {
    "prefix": "ep-res-clear-cookie-with-options",
    "body": "res.clearCookie('${1:name}', ${2:options})$0",
    "description": "Clears the cookie specified by name."
  },
  "Response Download": {
    "prefix": "ep-res-download",
    "body": "res.download('${1:path}')$0",
    "description": "Transfers the file at path as an attachment. Typically, browsers will prompt the user for download."
  },
  "Response End": {
    "prefix": "ep-res-end",
    "body": "res.end()$0",
    "description": "Ends the response process."
  },
  "Response Format": {
    "prefix": "ep-res-format",
    "body": [
      "res.format({",
      "\t'${1:format}': () => {",
      "\t\tres.send(${2:value})",
      "\t}",
      "})"
    ],
    "description": "Performs content-negotiation on the Accept HTTP header on the request object, when present."
  },
  "Response Get": {
    "prefix": "ep-res-get",
    "body": "res.get('${1:field}')$0",
    "description": "Returns the HTTP response header specified by field. The match is case-insensitive."
  },
  "Response Json": {
    "prefix": "ep-res-json",
    "body": "res.status(${2:200}).json(${1:body})$0",
    "description": "Sends a JSON response specifying http status code"
  },
  "Response Jsonp": {
    "prefix": "ep-res-jsonp",
    "body": "res.status(${2:200}).jsonp(${1:body})$0",
    "description": "Sends a JSON response with JSONP support."
  },
  "Response Links": {
    "prefix": "ep-res-links",
    "body": [
      "res.links({",
      "\tnext: '${1:link}',",
      "\tlast: '${2:link}'",
      "})"
    ],
    "description": "Joins the links provided as properties of the parameter to populate the response’s Link HTTP header field."
  },
  "Response Location": {
    "prefix": "ep-res-location",
    "body": "res.location(${1:path})$0",
    "description": "Sends a JSON response with JSONP support."
  },
  "Response Redirect": {
    "prefix": "ep-res-redirect",
    "body": "res.redirect('${1:path}')$0",
    "description": "Redirects to the URL derived from the specified path."
  },
  "Response Redirect With Status": {
    "prefix": "ep-res-redirect-with-status",
    "body": "res.redirect(${1:302}, '${2:path}')$0",
    "description": "Redirects to the URL derived from the specified path, with specified status, a positive integer that corresponds to an HTTP status code."
  },
  "Response Render": {
    "prefix": "ep-res-render",
    "body": "res.render('${1:view}')$0",
    "description": "Renders a view and sends the rendered HTML string to the client."
  },
  "Response Send": {
    "prefix": "ep-res-send",
    "body": "res.send(${1:body})$0",
    "description": "Sends the HTTP response."
  },
  "Response Send File": {
    "prefix": "ep-res-send-file",
    "body": "res.sendFile('${1:path}')$0",
    "description": "Transfers the file at the given path."
  },
  "Response Send Status": {
    "prefix": "ep-res-send-status",
    "body": "res.sendStatus(${1:statusCode})$0",
    "description": "Sets the response HTTP status code to statusCode and send its string representation as the response body."
  },
  "Response Set": {
    "prefix": "ep-res-set",
    "body": "res.set(${1:value})$0",
    "description": "Sets the response’s HTTP header field to value. To set multiple fields at once, pass an object as the parameter."
  },
  "Response Status": {
    "prefix": "ep-res-status",
    "body": "res.status(${1:statusCode})$0",
    "description": "Sets the HTTP status for the response."
  },
  "Response Rss": {
    "prefix": "ep-res-rss",
    "body": "res.status(${1:value}).send(${2:value})$0",
    "description": "res.status() chained with res.send()"
  },
  "Response Type": {
    "prefix": "ep-res-type",
    "body": "res.type('${1:type}')$0",
    "description": "Sets the Content-Type HTTP header to the MIME type as determined by mime.lookup() for the specified type."
  },
  "Response Vary": {
    "prefix": "ep-res-vary",
    "body": "res.vary('${1:vary}').render('${2:render}')$0",
    "description": "Adds the field to the Vary response header, if it is not there already."
  }
}
