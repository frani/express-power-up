{
  "Create Controller with GET": {
    "prefix": "ep-example-db",
    "body": [
      "const schema = require('../schemas/${1:item}.schema')",
      "/**",
      " * List ${1:item}s",
      " * @param {object} [query] - mongo query to list ${1:item}s",
      " * @param {number} [page=1] - page number",
      " * @param {number} [limit=10] - ${1:item}s per page",
      " * @returns {array} Array with ${1:item}s objects",
      " */",
      "const list = async ({query = {}, page = 1, limit = 10}) => {",
      "  const options = { page, limit, sort: { _id: -1 }, select: '-_id', lean: true }",
      "  try {",
      "    const listed = await schema.paginate(query, options)",
      "    return listed",
      "  } catch (error) {",
      "    throw error",
      "  }",
      "}",
      "",
      "/**",
      " * Find one ${1:item}",
      " * @param {object} [query] - mongo criteria to find one ${1:item}",
      " * @param {object} [projection] - mongo criteria to projection resutls",
      " * @returns {object} object with ${1:item} founded",
      " */",
      "const find = async ({query, projection = {}}) => {",
      "  try {",
      "    const found = await schema.findOne(query, projection).lean()",
      "    return found",
      "  } catch (error) {",
      "    throw error",
      "  }",
      "}",
      "",
      "/**",
      " * Create new ${1:item}",
      " * @param {object} [data] - object to set ${1:item} in DB",
      " * @returns {object} if all OK return new ${1:item} object, else returns FALSE",
      " */",
      "const create = async ({data}) => {",
      "  try {",
      "    const created = await schema.create(data)",
      "    if (!!created) return created",
      "    return false",
      "  } catch (error) {",
      "    throw error",
      "  }",
      "}",
      "",
      "/**",
      " * Replace one ${1:item}",
      " * @param {object} [query] - mongo query to find one ${1:item}",
      " * @param {object} [data] - object to replace one ${1:item}",
      " * @param {object} [options={}] - mongo query options",
      " * @returns {object} If all OK returns Updated ${1:item} Object, else returns FALSE",
      " */",
      "const replace = async ({query, data, options = {}}) => {",
      "  try {",
      "    let toReplace = { ...data }",
      "    toReplace['updated_at'] = Date.now()",
      "    const replaced = await schema.replaceOne(query, toReplace, options)",
      "    if (replaced.nModified > 0) return true",
      "    return false",
      "  } catch (error) {",
      "    throw error",
      "  }",
      "}",
      "",
      "/**",
      " * Update partially ${1:item}",
      " * @param {object} [query] - mongo query to find one ${1:item}",
      " * @param {object} [data] - object to update one ${1:item}",
      " * @param {object} [options={}] - mongo query options",
      " * @returns {object} If all OK returns Updated ${1:item} Object, else returns FALSE",
      " */",
      "const update = async ({query, data, options = {}}) => {",
      "  try {",
      "    let toUpdate = { \\$set: { ...data }, \\$currentDate: { updated_at: true } }",
      "    const updated = await schema.updateOne(query, toUpdate, options)",
      "    if (updated.nModified > 0) return true",
      "    return false",
      "  } catch (error) {",
      "    throw error",
      "  }",
      "}",
      "",
      "/**",
      " * Remove one ${1:item}",
      " * @param {string} id - ${1:item} id to remove",
      " * @returns {object} If OK, return ${1:item} object removed",
      " * @returns {boolean} If not OK, return false",
      " */",
      "const remove = async ({id}) => {",
      "  try {",
      "    const removed = await schema.deleteOne({ id })",
      "    return removed",
      "  } catch (error) {",
      "    throw error",
      "  }",
      "}",
      "",
      "module.exports = {",
      "  list,",
      "  find,",
      "  create,",
      "  replace,",
      "  update,",
      "  remove",
      "}\n$0"
    ],
    "description": "Create an '*.db.js' file full content, setting: list, find, create, update and remove methods"
  }
}
