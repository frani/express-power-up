{
  "Create Controller with GET": {
    "prefix": "ep-example-controller",
    "body": [
      "const httpStatus = require('http-status')",
      "const ${1:item}sDB = require('../dbs/${1:item}s.db')",
      "",
      "",
      "/**",
      "* List ${1:item}",
      "* @public",
      "*/",
      "const list = async (req, res, next) => {",
      "try {",
      "const { page, limit } = req.query",
      "const listed = await ${1:item}sDB.list({ uuid: ${1:item}id }, page, limit)",
      "if (!!listed) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item}s listed`,",
      "body: listed",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item}s not found`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "",
      "/**",
      "* Post ${1:item}",
      "* @public",
      "*/",
      "const post = async (req, res, next) => {",
      "try {",
      "const toCreated = req.body",
      "const created = await ${1:item}sDB.create(toCreated)",
      "if (!!created) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item} created`,",
      "body: created",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item} not created`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "",
      "/**",
      "* Put ${1:item}",
      "* @public",
      "*/",
      "const put = async (req, res, next) => {",
      "try {",
      "const toUpdate = req.body",
      "const updated = await ${1:item}sDB.update({ uuid: ${1:item}id }, toUpdate)",
      "if (!!updated) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item}s updated`,",
      "body: updated",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item} not updated`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "",
      "/**",
      "* Delete ${1:item}",
      "* @public",
      "*/",
      "const remove = async (req, res, next) => {",
      "try {",
      "const { ${1:item}id } = req.body",
      "const removed = await ${1:item}sDB.remove({ uuid: ${1:item}id })",
      "if (!!removed) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item}s removed`,",
      "body: removed",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item} not removed`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "",
      "/**",
      "* Get ${1:item}",
      "* @public",
      "*/",
      "const get = async (req, res, next) => {",
      "try {",
      "const { ${1:item}id } = req.params",
      "const found = await ${1:item}sDB.find({ uuid: ${1:item}id })",
      "if (!!found) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item} found`,",
      "body: found",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item} not found`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "module.exports = {",
      "  list,",
      "  get,",
      "  put,",
      "  post,",
      "  remove",
      "}\n$0"
    ],
    "description": "Create an '*.controller.js' file full content, importing http-status and setting function to handle list, get, put, post, and delete request"
  }
}
