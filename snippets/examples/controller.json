{
  "Create Controller with GET": {
    "prefix": "ep-example-controller",
    "body": [
      "const httpStatus = require('http-status')",
      "const ${1:item}sDB = require('../dbs/${1:item}s.db')",
      "",
      "",
      "/**",
      "* List ${1:item}",
      "* @public",
      "*/",
      "const list = async (req, res, next) => {",
      "try {",
      "const { page, limit } = req.query",
      "let query = {}",
      "if (${1:item}id) query['uuid'] = { uuid: ${1:item}id }",
      "const listed = await ${1:item}sDB.list({ query , page, limit})",
      "if (!!listed) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item}s listed`,",
      "body: listed",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item}s not found`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "",
      "/**",
      "* Post ${1:item}",
      "* @public",
      "*/",
      "const post = async (req, res, next) => {",
      "try {",
      "const data = req.body",
      "const created = await ${1:item}sDB.create({ data })",
      "if (!!created) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item} created`,",
      "body: created",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item} not created`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "",
      "/**",
      "* Patch ${1:item}",
      "* @public",
      "*/",
      "const patch = async (req, res, next) => {",
      "try {",
      "let query = {}",
      "if (${1:item}id) query['uuid'] = { uuid: ${1:item}id }",
      "const data = req.body",
      "const updated = await ${1:item}sDB.replaceOne({query, data})",
      "if (!!updated) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item}s updated`,",
      "body: updated",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item} not updated`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "/**",
      "* Put ${1:item}",
      "* @public",
      "*/",
      "const put = async (req, res, next) => {",
      "try {",
      "let query = {}",
      "if (${1:item}id) query['uuid'] = { uuid: ${1:item}id }",
      "const data = req.body",
      "const updated = await ${1:item}sDB.updateOne({query, data})",
      "if (!!updated) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item}s updated`,",
      "body: updated",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item} not updated`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "",
      "/**",
      "* Delete ${1:item}",
      "* @public",
      "*/",
      "const remove = async (req, res, next) => {",
      "try {",
      "const { ${1:item}id } = req.body",
      "const removed = await ${1:item}sDB.remove({ id: ${1:item}id })",
      "if (!!removed) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item}s removed`,",
      "body: removed",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item} not removed`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "",
      "/**",
      "* Get ${1:item}",
      "* @public",
      "*/",
      "const get = async (req, res, next) => {",
      "try {",
      "const { ${1:item}id } = req.params",
      "let query = {}",
      "if (${1:item}id) query['uuid'] = { uuid: ${1:item}id }",
      "const found = await ${1:item}sDB.find({query})",
      "if (!!found) {",
      "return res.status(httpStatus.OK).json({",
      "success: true,",
      "message: `${1:item} found`,",
      "body: found",
      "})",
      "}",
      "return res.status(httpStatus.NOT_FOUND).json({",
      "success: false,",
      "message: `${1:item} not found`",
      "})",
      "} catch (error) {",
      "next(error)",
      "}",
      "}",
      "",
      "module.exports = {",
      "  list,",
      "  get,",
      "  put,",
      "  post,",
      "  remove",
      "}\n$0"
    ],
    "description": "Create an '*.controller.js' file full content, importing http-status and setting function to handle list, get, put, post, and delete request"
  },
  "Create a Router full example": {
    "prefix": "ep-example-router-full",
    "body": [
      "const express = require('express')",
      "const { validate } = require('express-validation')",
      "const validation = require('../../validations/${1:item}s.validation')",
      "const controller = require('../../controllers/${1:item}s.controller')",
      "",
      "const router = express.Router({ mergeParams: true, caseSensitive: true })",
      "",
      "/**",
      " * @api {get} /v1/${1:items} 1. List ${1:items}",
      " * @apiVersion 1.0.0",
      " * @apiName ${4:list}",
      " * @apiGroup ${5:${1:items}}",
      " * @apiPermission admin",
      " * ",
      " * @apiDescription list ${1:items}",
      " * ",
      " * @apiParam {Number} [page=1] Query param - Page number",
      " * @apiParam {Number} [limit=10] Query param - ${1:items} per page",
      " * ",
      " * @apiSuccess {Boolean}  success       True",
      " * @apiSuccess {String}   Message       ${1:items} listed",
      " * @apiSuccess {Object}   body          Pagination object.",
      " * ",
      " * @apiSuccessExample {json} Success-Response:",
      " *     HTTP/1.1 200 OK",
      " *     {",
      " *       \"success\": true,",
      " *       \"message\": \"${1:items} listed\"",
      " *       \"body\": {",
      " *           \"docs\": [â€¦],",
      " *           \"hasNextPage\": false,",
      " *           \"hasPrevPage\": false,",
      " *           \"limit\": 10,",
      " *           \"nextPage\": null,",
      " *           \"page\": 1,",
      " *           \"pagingCounter\": 1,",
      " *           \"prevPage\": null,",
      " *           \"totalDocs\": 16,",
      " *           \"totalPages\": 1",
      " *       }",
      " *     }",
      " *",
      " * @apiError NoAccessRight Only authenticated Users can access the data.",
      " * @apiError UserNotFound   The <code>id</code> of the User was not found.",
      " *",
      " * @apiErrorExample Response (example):",
      " *     HTTP/1.1 401 UNAUTHORIZED",
      " *     {",
      " *       \"success\": false,",
      " *       \"message\": \"jwt must be provided\"",
      " *       \"code\": 401,\",",
      " *     }",
      " */$0",
      "router.get('/', validate(validation.list), controller.list)",
      "",
      "/**",
      " * @api {post} /v1/${1:item}s 2. Create ${1:item}",
      " * @apiVersion 1.0.0",
      " * @apiName ${4:post}",
      " * @apiGroup ${5:${1:items}}",
      " * @apiPermission admin",
      " * ",
      " * @apiDescription create ${1:item}",
      " * ",
      " * @apiParamExample {json} Request-Example:",
      " *     {",
      " *       \"key\": \"value\",",
      " *     }",
      " * ",
      " * @apiSuccess {Boolean}  success       True",
      " * @apiSuccess {String}   Message       ${1:item} created",
      " * @apiSuccess {Object}   body          ${1:item}id object created",
      " * ",
      " * @apiSuccessExample {json} Success-Response:",
      " *     HTTP/1.1 201 OK",
      " *     {",
      " *       \"success\": true,",
      " *       \"message\": \"${1:items} created\"",
      " *       \"body\": {",
      " *           ${1:item}id: 11",
      " *       }",
      " *     }",
      " *",
      " * @apiError NoAccessRight Only authenticated Users can access the data.",
      " * @apiError UserNotFound   The <code>id</code> of the User was not found.",
      " *",
      " * @apiErrorExample Response (example):",
      " *     HTTP/1.1 401 UNAUTHORIZED",
      " *     {",
      " *       \"success\": false,",
      " *       \"message\": \"jwt must be provided\"",
      " *       \"code\": 401,\",",
      " *     }",
      " */$0",
      "router.post('/', validate(validation.post), controller.post)",
      "",
      "/**",
      " * @api {patch} /v1/${1:items}/:${1:item}id 4. Update ${1:item}",
      " * @apiVersion 1.0.0",
      " * @apiName ${5:patch}",
      " * @apiGroup ${6:${1:items}}",
      " * @apiPermission admin",
      " * ",
      " * @apiDescription update ${1:item}",
      " * ",
      " * @apiParamExample {json} Request-Example:",
      " *     {",
      " *       \"key\": \"value\",",
      " *     }",
      " * ",
      " * @apiSuccess {Boolean}  success       True",
      " * @apiSuccess {String}   Message       ${1:item} updated",
      " * @apiSuccess {Object}   body          ${1:item}id object",
      " *",
      " * @apiSuccessExample {json} Success-Response:",
      " *     HTTP/1.1 200 OK",
      " *     {",
      " *       \"success\": true,",
      " *       \"message\": \"${1:items} updated\"",
      " *       \"body\": {",
      " *           ${1:item}id: 10",
      " *       }",
      " *     }",
      " *",
      " * @apiError NoAccessRight Only authenticated Users can access the data.",
      " * @apiError UserNotFound   The <code>id</code> of the User was not found.",
      " *",
      " * @apiErrorExample Response (example):",
      " *     HTTP/1.1 401 UNAUTHORIZED",
      " *     {",
      " *       \"success\": false,",
      " *       \"message\": \"jwt must be provided\"",
      " *       \"code\": 401,\",",
      " *     }",
      " */$0",
      "router.patch('/', validate(validation.patch), controller.patch)",
      "",
      "/**",
      " * @api {put} /v1/${1:items}/:${1:item}id 4. Replace ${1:item}",
      " * @apiVersion 1.0.0",
      " * @apiName ${5:put}",
      " * @apiGroup ${6:${1:items}}",
      " * @apiPermission admin",
      " * ",
      " * @apiDescription replace ${1:item}",
      " * ",
      " * @apiParamExample {json} Request-Example:",
      " *     {",
      " *       \"key\": \"value\",",
      " *     }",
      " * ",
      " * @apiSuccess {Boolean}  success       True",
      " * @apiSuccess {String}   Message       ${1:item} replaced",
      " * @apiSuccess {Object}   body          ${1:item}id object",
      " *",
      " * @apiSuccessExample {json} Success-Response:",
      " *     HTTP/1.1 200 OK",
      " *     {",
      " *       \"success\": true,",
      " *       \"message\": \"${1:items} replaced\"",
      " *       \"body\": {",
      " *           ${1:item}id: 10",
      " *       }",
      " *     }",
      " *",
      " * @apiError NoAccessRight Only authenticated Users can access the data.",
      " * @apiError UserNotFound   The <code>id</code> of the User was not found.",
      " *",
      " * @apiErrorExample Response (example):",
      " *     HTTP/1.1 401 UNAUTHORIZED",
      " *     {",
      " *       \"success\": false,",
      " *       \"message\": \"jwt must be provided\"",
      " *       \"code\": 401,\",",
      " *     }",
      " */$0",
      "router.put('/', validate(validation.put), controller.put)",
      "",
      "/**",
      " * @api {delete} /v1/${1:items}/:${1:item}id 5. Remove ${1:item}",
      " * @apiVersion 1.0.0",
      " * @apiName ${5:delete}",
      " * @apiGroup ${6:${1:items}}",
      " * @apiPermission admin",
      " *",
      " * @apiDescription delete ${1:item}",
      " *",
      " * @apiParam {String} :${1:item} URL param - ${1:item} id",
      " *",
      " * @apiSuccess {Boolean}  success       True",
      " * @apiSuccess {String}   Message       ${1:item} deleted",
      " * @apiSuccess {Object}   body          ${1:item}id object",
      " *",
      " * @apiSuccessExample {json} Success-Response:",
      " *     HTTP/1.1 200 OK",
      " *     {",
      " *       \"success\": true,",
      " *       \"message\": \"${1:items} deleted\"",
      " *     }",
      " *",
      " * @apiError NoAccessRight Only authenticated Users can access the data.",
      " * @apiError UserNotFound   The <code>id</code> of the User was not found.",
      " *",
      " * @apiErrorExample Response (example):",
      " *     HTTP/1.1 401 UNAUTHORIZED",
      " *     {",
      " *       \"success\": false,",
      " *       \"message\": \"jwt must be provided\"",
      " *       \"code\": 401,\",",
      " *     }",
      " */$0",
      "router.delete('/', validate(validation.remove ), controller.remove)",
      "",
      "/**",
      " * @api {get} /v1/${1:items}/:${1:item}id 3. Find ${1:item}",
      " * @apiVersion 1.0.0",
      " * @apiName ${5:get}",
      " * @apiGroup ${6:${1:items}}",
      " * @apiPermission admin",
      " *",
      " * @apiDescription find ${1:item}",
      " *",
      " * @apiParam {String} :${1:item} URL param - ${1:item} id",
      " *",
      " * @apiSuccess {Boolean}  success       True",
      " * @apiSuccess {String}   Message       ${1:item} found",
      " * @apiSuccess {Object}   body          ${1:item}id object",
      " *",
      " * @apiSuccessExample {json} Success-Response:",
      " *     HTTP/1.1 200 OK",
      " *     {",
      " *       \"success\": true,",
      " *       \"message\": \"${1:items} found\"",
      " *       \"body\": {",
      " *           ${1:item}id: 10",
      " *       }",
      " *     }",
      " *",
      " * @apiError NoAccessRight Only authenticated Users can access the data.",
      " * @apiError UserNotFound   The <code>id</code> of the User was not found.",
      " *",
      " * @apiErrorExample Response (example):",
      " *     HTTP/1.1 401 UNAUTHORIZED",
      " *     {",
      " *       \"success\": false,",
      " *       \"message\": \"jwt must be provided\"",
      " *       \"code\": 401,\",",
      " *     }",
      " */$0",
      "router.get('/:${1:item}id', validate(validation.get ), controller.get)",
      "",
      "",
      "module.exports = router\n$0"
    ],
    "description": "Create an '*.router.js' file content importing validate, validation, controller with apidoc example"
  }
}
